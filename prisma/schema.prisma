// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// admin - creates and maintain 
model User {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email      String  @unique
  firstName  String
  lastName   String
  password   String
  isVerified Boolean @default(false)

  sessions          Session[]
  verivicationCodes VerificationCode[]
}

model Session {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  expiresAt DateTime
  userAgent String?

  user   User   @relation(fields: [userId], references: [id])
  userId String
}

model VerificationCode {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  expiresAt DateTime
  type      VerivicationCodeType

  user   User   @relation(fields: [userId], references: [id])
  userId String
}

enum VerivicationCodeType {
  EmailVerification
  PasswordReset
}

// ARCHER  
model Archer {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  club   Club   @relation(fields: [clubId], references: [id])
  clubId String

  firstName  String
  lastName   String
  username   String      @unique
  email      String?     @unique
  public     Boolean     @default(false)
  // connection to scorecards
  scorecards Scorecard[]
}

// CLUBS
model Club {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name    String
  address String

  tournaments Tournament[]
  members     Archer[]
}

// SEASONS
enum RulesType {
  scandinavian3D
  worldArchery
  worldArchery3D
}

model Season {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  rules           RulesType
  title           String
  description     String
  tournamentCount Int
  isFinished      Boolean   @default(false)

  tournaments Tournament[]
}

// TOURNAMENT
model Tournament {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  rules       RulesType
  title       String
  attendAt    DateTime
  address     String
  description String
  isFinished  Boolean   @default(false)
  rounds      Int       @default(20) // for dynamic scorring if there is not time for full tournament

  // connection to club
  organizedBy   Club?       @relation(fields: [organizedById], references: [id])
  organizedById String?
  // connection to season
  season        Season?     @relation(fields: [seasonId], references: [id])
  seasonId      String?
  // connection to scorecards
  scorecards    Scorecard[]
}

// SCORECARD
model Scorecard {
  id           String      @id @default(uuid())
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  rules        RulesType
  // connection to archer
  archer       Archer?     @relation(fields: [archerId], references: [id])
  archerId     String?
  // connection to tournament
  tournament   Tournament? @relation(fields: [tournamentId], references: [id])
  tournamentId String?
  // conection to a scores
  scores3D     Score3D[]
  scoresWA     ScoreWA[]
  scoresWA3D   ScoreWA3D[]
}

// SCORE (one round of archery shooting or single animal for 3d)
enum AnimalHit {
  center
  vital
  body
  miss
}

enum AnimalHitWA {
  bullseye
  center
  vital
  body
  miss
}

// score types atomics
model Score3D {
  id          String    @id @default(uuid())
  arrow       Int
  hit         AnimalHit
  // connection to score
  scorecard   Scorecard @relation(fields: [scorecardId], references: [id])
  scorecardId String
}

model ScoreWA {
  id          String    @id @default(uuid())
  first       Int
  second      Int
  third       Int
  // connection to Score
  scorecard   Scorecard @relation(fields: [scorecardId], references: [id])
  scorecardId String
}

model ScoreWA3D {
  id          String      @id @default(uuid())
  first       AnimalHitWA
  second      AnimalHitWA
  // connection to Score
  scorecard   Scorecard   @relation(fields: [scorecardId], references: [id])
  scorecardId String
}
