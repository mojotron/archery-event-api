// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email      String   @unique
  firstName  String
  lastName   String
  password   String
  isVerified Boolean  @default(false)
  role       UserRole @default(user)

  sessions                Session[]
  verivicationCodes       VerificationCode[]
  // admin fields
  seasonCreated           Season[]
  tournamentsCreated      Tournament[]
  // score cards
  scoreCardsScaninavian3D ScoreCardScandinavian3D[]
}

enum UserRole {
  user
  admin
}

model Session {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  expiresAt DateTime
  userAgent String?

  user   User   @relation(fields: [userId], references: [id])
  userId String
}

model VerificationCode {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  expiresAt DateTime
  type      VerivicationCodeType

  user   User   @relation(fields: [userId], references: [id])
  userId String
}

enum VerivicationCodeType {
  EmailVerification
  PasswordReset
}

model Season {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title           String
  description     String
  type            SeasonType
  tournamentCount Int
  isFinished      Boolean    @default(false)

  createdBy   User         @relation(fields: [createdById], references: [id])
  createdById String
  tournaments Tournament[]
}

enum SeasonType {
  scandinavian_3D
}

model Tournament {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title       String
  description String?
  attendAt    DateTime

  organizedBy String
  isFinished  Boolean @default(false)

  location String

  locationCords    LocationCoords? @relation(fields: [locationCoordsId], references: [id])
  locationCoordsId String?

  createdBy   User   @relation(fields: [createdById], references: [id])
  createdById String

  season   Season @relation(fields: [seasonId], references: [id])
  seasonId String

  scoreCards ScoreCardScandinavian3D[]
}

model LocationCoords {
  id         String       @id @default(uuid())
  lonitude   Int
  latitude   Int
  Tournament Tournament[]
}

// SCORE CARDS
// scandinavian 3d rules
model ScoreCardScandinavian3D {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  targets ScoreScandinavian3D[]

  tournament   Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId String

  user   User   @relation(fields: [userId], references: [id])
  userId String
}

model ScoreScandinavian3D {
  id    String                 @id @default(uuid())
  arrow Int
  hit   ScoreScandinavian3DHit

  scoreCard   ScoreCardScandinavian3D @relation(fields: [scoreCardId], references: [id])
  scoreCardId String
}

enum ScoreScandinavian3DHit {
  miss
  center
  vital
  body
}
