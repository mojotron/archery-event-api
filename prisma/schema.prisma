// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// admin - creates and maintain 
model User {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email      String  @unique
  firstName  String
  lastName   String
  password   String
  isVerified Boolean @default(false)

  sessions          Session[]
  verivicationCodes VerificationCode[]
}

model Session {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  expiresAt DateTime
  userAgent String?

  user   User   @relation(fields: [userId], references: [id])
  userId String
}

model VerificationCode {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  expiresAt DateTime
  type      VerivicationCodeType

  user   User   @relation(fields: [userId], references: [id])
  userId String
}

enum VerivicationCodeType {
  EmailVerification
  PasswordReset
}

// ARCHER  
model Archer {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  club   Club?   @relation(fields: [clubId], references: [id])
  clubId String?

  firstName  String
  lastName   String
  username   String      @unique
  email      String?     @unique
  public     Boolean     @default(false)
  // connection to scorecards
  scorecards ScoreCard[]
}

// CLUBS
model Club {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name    String
  address String

  tournaments Tournamnet[]
  members     Archer[]
}

// SEASONS
enum RulesType {
  scandinavian3D
  worldArchery
  worldArchery3D
}

model Season {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  rules           RulesType
  title           String
  description     String
  tournamentCount Int
  isFinished      Boolean   @default(false)

  tournaments Tournamnet[]
}

// TOURNAMENT
model Tournamnet {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  rules       RulesType
  title       String
  attendAt    DateTime
  address     String
  description String
  isFinished  Boolean   @default(false)

  // connection to club
  organizedBy   Club?       @relation(fields: [organizedById], references: [id])
  organizedById String?
  // connection to season
  season        Season?     @relation(fields: [seasonId], references: [id])
  seasonId      String?
  // connection to scorecards
  scorecards    ScoreCard[]
}

// SCORECARD
model ScoreCard {
  id           String      @id @default(uuid())
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  // connection to archer
  archer       Archer?     @relation(fields: [archerId], references: [id])
  archerId     String?
  // connection to tournament
  tournamnet   Tournamnet? @relation(fields: [tournamnetId], references: [id])
  tournamnetId String?
  // conection to a scores
  scores       Score[]
}

// SCORE (one round of archery shooting or single animal for 3d)
model Score {
  id          String     @id @default(uuid())
  // connection to score card
  scoreCard   ScoreCard? @relation(fields: [scoreCardId], references: [id])
  scoreCardId String?
  // connection type of score
  score3D     Score3D?
  scoreWA     ScoreWA?
}

enum AnimalHit {
  center
  vital
  body
  miss
}

// score types atomics
model Score3D {
  id      String    @id @default(uuid())
  arrow   Int
  hit     AnimalHit
  // connection to score
  score   Score     @relation(fields: [scoreId], references: [id])
  scoreId String    @unique
}

model ScoreWA {
  id         String  @id @default(uuid())
  first      Int
  second     Int
  third      Int
  isBullseye Boolean @default(false)
  // connection to Score
  score      Score   @relation(fields: [scoreId], references: [id])
  scoreId    String  @unique
}
