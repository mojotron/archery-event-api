// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email      String   @unique
  firstName  String
  lastName   String
  password   String
  isVerified Boolean  @default(false)
  role       UserRole @default(user)

  sessions           Session[]
  verivicationCodes  VerificationCode[]
  seasonCreated      Season[]
  tournamentsCreated Tournament[]
}

enum UserRole {
  user
  admin
}

model Session {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  expiresAt DateTime
  userAgent String?

  user   User   @relation(fields: [userId], references: [id])
  userId String
}

model VerificationCode {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  expiresAt DateTime
  type      VerivicationCodeType

  user   User   @relation(fields: [userId], references: [id])
  userId String
}

enum VerivicationCodeType {
  EmailVerification
  PasswordReset
}

model Season {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title           String
  description     String
  type            SeasonType
  tournamentCount Int
  isFinished      Boolean    @default(false)

  createdBy   User         @relation(fields: [createdById], references: [id])
  createdById String
  tournaments Tournament[]
}

enum SeasonType {
  scandinavian_3D
}

model Tournament {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title       String
  description String?
  attendAt    DateTime
  location    String
  organizedBy String
  isFinished  Boolean  @default(false)

  participants ScoreCard[]

  season      Season @relation(fields: [seasonId], references: [id])
  seasonId    String
  createdBy   User   @relation(fields: [createdById], references: [id])
  createdById String
}

model ScoreCard {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tournament   Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId String
}

model Target {
  id    String  @id @default(uuid())
  round Int
  score Score[]
}

model Score {
  id     String @id @default(uuid())
  arrow  Int
  points Int

  target   Target @relation(fields: [targetId], references: [id])
  targetId String
}
