// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email      String  @unique
  firstName  String
  lastName   String
  password   String
  isVerified Boolean @default(false)

  sessions          Session[]
  verivicationCodes VerificationCode[]
}

model Session {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  expiresAt DateTime
  userAgent String?

  user   User   @relation(fields: [userId], references: [id])
  userId String
}

model VerificationCode {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  expiresAt DateTime
  type      VerivicationCodeType

  user   User   @relation(fields: [userId], references: [id])
  userId String
}

enum VerivicationCodeType {
  EmailVerification
  PasswordReset
}

// MAJOR REFACTOR 
// ARCHER
model Archer {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  club   Club?   @relation(fields: [clubId], references: [id])
  clubId String?

  firstName String
  lastName  String
  username  String  @unique
  email     String? @unique
  public    Boolean @default(false)

  scorecardsScan3D ScoreCardScan3D[]
  scorecardsWA     ScoreCardWA[]
}

// CLUBS
model Club {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name    String
  address String

  members     Archer[]
  tournaments TournamnetInfo[]
}

// TARGET SCORES
// scandinavan score sistem
model ScoreScan3D {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  arrow Int
  hit   S3D_hit

  scoreCard   ScoreCardScan3D @relation(fields: [scoreCardId], references: [id])
  scoreCardId String

  animal   AnimalTarget? @relation(fields: [animalId], references: [id])
  animalId String?
}

enum S3D_hit {
  miss
  center
  vital
  body
}

// TARGET DESCRIPTION
model AnimalTarget {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  description String
  distance    Int
  slope       TargetSlope

  ScoreScan3D ScoreScan3D[]
}

enum TargetSlope {
  eyelevel
  uphill
  downhill
}

// world archery target face
model ScoreWA {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  first  Int
  second Int
  third  Int
  axesX  Int?
  axesY  Int?

  scoreCard   ScoreCardWA? @relation(fields: [scoreCardId], references: [id])
  scoreCardId String?

  target   FaceTarget? @relation(fields: [targetId], references: [id])
  targetId String?
}

model FaceTarget {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  distance Int
  ScoreWA  ScoreWA[]
}

// SCORECARDS - collection of and scores for archer on tournamnet
model ScoreCardScan3D {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  scores ScoreScan3D[]

  archer   Archer @relation(fields: [archerId], references: [id])
  archerId String

  tournament   Tournamnet3D? @relation(fields: [tournamentId], references: [id])
  tournamentId String?
}

model ScoreCardWA {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  scores ScoreWA[]

  archer   Archer @relation(fields: [archerId], references: [id])
  archerId String
}

// TOURNAMENTS
model TournamnetInfo {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title       String
  attendAt    DateTime
  address     String
  description String
  isFinished  Boolean  @default(false)

  organizedBy   Club?   @relation(fields: [organizedById], references: [id])
  organizedById String?
}

// scandinavian turnament
model Tournamnet3D {
  id         String            @id @default(uuid())
  // score card connection
  scoreCards ScoreCardScan3D[]
  // season connection
  season     Season3D          @relation(fields: [seasonId], references: [id])
  seasonId   String
}

model TournamentWA {
  id       String   @id @default(uuid())
  // score card connection
  // season connectiom
  season   SeasonWA @relation(fields: [seasonId], references: [id])
  seasonId String
}

// SEASONS
model SeasonInfo {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title           String
  description     String
  tournamentCount Int
  isFinished      Boolean @default(false)

  season3D   Season3D? @relation(fields: [season3DId], references: [id])
  season3DId String?   @unique

  seasonWA   SeasonWA? @relation(fields: [seasonWAId], references: [id])
  seasonWAId String?   @unique
}

model Season3D {
  id String @id @default(uuid())

  seasonInfo  SeasonInfo?
  tournaments Tournamnet3D[]
}

model SeasonWA {
  id String @id @default(uuid())

  seasonInfo  SeasonInfo?
  tournaments TournamentWA[]
}
